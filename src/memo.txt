useEffect --> 데이터 fetch / 구독 / Dom 수정
clean up --> 구독과 구독해지를 한 공간에서
dependency array --> 필요한 변경시에만 effect 실행

*useEffect(공식문서설명)
렌더링 이후에 어떤 일을 수행해야하는 지를 말합니다.
React는 우리가 넘긴 함수를 기억했다가(이 함수를 ‘effect’라고 부릅니다) 
정리(clean-up)를 이용하는 Effect
구독(subscription)
구독해제(unsubscription)
이펙트안에 리턴값으로 함수넣으면됨
return () => {//내용}
    1. useEffect( () => {//사용할꺼} )
    첫번째인자로 콜백함수를받는거
    렌더링될때마다 실행
    2. useEffect( () => {//사용할꺼}, [])
    첫번째인자로 콜백 두번째인자로 비어있는 디펜더시 어레이
    처음렌더링될때만 실행
    3. useEffect( () => {//사용할꺼}, [value])
    첫번째인자로 콜백 두번째인자로 디펜더시 어레이
    처음렌더링될때실행 후 배열안에 요소의 값이 바뀔때마다 실행

*useRef
변화는감지하지만 그변화로 렌더링을 발생시키면안될때 사용
const ref = useRef(value) {current: value}로 반환함
컴포넌트가 계속해서 렌더링이되어도 컴포넌트가 언마운트되기전까지 값을유지됨
State와 비슷하게 어떤값을 저장하는공간으로사용됨

State의변화 -> 렌더링됨 -> "컴포넌트 내부 변수"들이 초기화됨
    리렌더링이되면 함수가 다시불러짐 
Ref의변화 -> 렌더링 안됨 -> 변수들이 유지됨 (불필요한렌더링을막을수있음)
    State의변화 -> 렌더링됨 -> Ref안에 값은 유지됨

유즈레프를통해서 돔요소에 접근할수있음
 ex) 로그인창을열었을때 아이디입력인풋에 포커스가 바로되게끔할수있음 ref2파일임